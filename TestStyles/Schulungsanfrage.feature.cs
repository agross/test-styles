// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestStyles
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Kunden können Schulungen anfragen")]
    public partial class KundenKonnenSchulungenAnfragenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Schulungsanfrage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de"), "", "Kunden können Schulungen anfragen", "  Als Kunde kann ich eine Schulung zu einem Thema anfragen,\n  sodass ein Angebot " +
                    "für mich erstellt wird.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anfrage von einem menschlichen Benutzer")]
        public void AnfrageVonEinemMenschlichenBenutzer()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anfrage von einem menschlichen Benutzer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
    testRunner.Given("das ausgefüllte Anfrageformular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
#line 12
    testRunner.Given("die Spamprüfung die einen menschlichen Benutzer ermittelt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
#line 14
    testRunner.When("das Formular abgesendet wird", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
#line 16
    testRunner.Then("wird dem Kunden eine Benachrichtigung über den Empfang der Anfrage zugesendet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
#line 17
    testRunner.Then("wird das Backoffice über die Anfrage informiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
#line 18
    testRunner.Then("wird eine Aufgabe für das Backoffice erfasst werden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anfrage von einem Bot")]
        public void AnfrageVonEinemBot()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anfrage von einem Bot", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
    testRunner.Given("das ausgefüllte Anfrageformular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
#line 26
    testRunner.And("die Spamprüfung die einen Bot ermittelt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
#line 28
    testRunner.When("das Formular abgesendet wird", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
#line 30
    testRunner.Then("wird das Backoffice über die Anfrage mit der Möglichkeit zur Freigabe informiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
#line 31
    testRunner.Then("hält der Prozess für 30 Tage an", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anfrage von einem menschlichen Benutzer der als Bot identifiziert wurde wird inne" +
            "rhalb von 30 Tagen freigegeben")]
        public void AnfrageVonEinemMenschlichenBenutzerDerAlsBotIdentifiziertWurdeWirdInnerhalbVon30TagenFreigegeben()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anfrage von einem menschlichen Benutzer der als Bot identifiziert wurde wird inne" +
                    "rhalb von 30 Tagen freigegeben", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
    testRunner.Given("eine Anfrage von einem Bot am 01.02.2022", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
#line 36
    testRunner.When("die Freigabe am 03.02.2022 erfolgt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
#line 37
    testRunner.Then("wird dem Kunden eine Benachrichtigung über den Empfang der Anfrage zugesendet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
#line 38
    testRunner.And("wird eine Aufgabe für das Backoffice erfasst werden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anfrage von einem menschlichen Benutzer der als Bot identifiziert wurde wird nach" +
            " > 30 Tagen freigegeben")]
        public void AnfrageVonEinemMenschlichenBenutzerDerAlsBotIdentifiziertWurdeWirdNach30TagenFreigegeben()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anfrage von einem menschlichen Benutzer der als Bot identifiziert wurde wird nach" +
                    " > 30 Tagen freigegeben", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
    testRunner.Given("eine Anfrage von einem Bot am 01.02.2022", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
#line 43
    testRunner.When("die Freigabe am 31.12.2022 erfolgt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
#line 44
    testRunner.Then("wird dem Kunden keine Benachrichtigung zugesendet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
#line 45
    testRunner.And("wird keine Aufgabe für das Backoffice erfasst werden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
